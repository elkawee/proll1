* prelude

  eval functions 

#+begin_src emacs-lisp
  (defun org-babel-execute:swi-prolog (body params)
    "experimentally exec prolog"
    ;; im wesentlichen geklaut von org-babel-execute:js
    (let* ((tangle (cdr (assoc :tangle params )))
           (script-file (if (string-equal tangle "no" )
                            (org-babel-temp-file "prolog-tmp-" ) 
                          tangle )))
      
      
      (with-temp-file script-file (insert body))
      (shell-command-to-string
       (message (format "swipl -g 'go.' -t halt -s %s" 
                        (org-babel-process-file-name script-file))))
      
      )
    )
  
  (defun org-babel-execute:scheme (body params)
    (let* ((tangle (cdr (assoc :tangle params)))
           (script-file 
            (if (string-equal tangle "no")
                (org-babel-temp-file "org-babel-" ".rkt")
              tangle)))
      (with-temp-file script-file
        (insert body))
      (let* ((pn (org-babel-process-file-name script-file))
             (cmd (format "\"$(which racket)\" -u %s" pn)))
        (message cmd)
        (shell-command-to-string cmd)
        )))
  
#+end_src

#+RESULTS:
: org-babel-execute:scheme




#+name: rack_header
#+begin_src scheme
#lang racket 
(require (file "../../proll1/src_out/proll1.rkt"))
#+end_src


* exercises 
** member

*** prolog 


#+begin_src swi-prolog :tangle src_out/chap2_member.pl :noweb yes 
member(X,[X|_]).
member(X,[_|T]):- member(X,T).

mystery(X, L1, L2):- member(X, L1), member(X, L2).

go :- L1 = [ a , b , c ,d ] ,
      L2 = [ b , a],
      findall( X , mystery( X , L1 , L2 ) , Res ) ,
      print( Res ) . 

#+end_src 

#+RESULTS:
: % /Users/elkawee/src/projects/reasoned/clause_and_effect/examples/src_out/chap2_member.pl compiled 0.00 sec, 5 clauses
: [a,b]

*** racket 

#+begin_src scheme :tangle src_out/chap2_member.rkt :noweb yes
  <<rack_header>>
  (define (member X L )
    (fresh (H T)
           (=:= (cons H T) L) ; bricht hier einfach ab, wenn nil nicht mit (cons H T) unified
           (cond-e
            [(=:= X H)]
            [(goalify (member X T))])))
  
  ;(run* (X) (member 'a `[ a ,X c d a]))
  
  (define (mystery X L1 L2)
    (and-g (member X L1) (member X L2)))
  
  (run* (X) (mystery X '(a b c) '(c d e a)))
            
  
  
#+end_src 

#+RESULTS:
: '((a) (c))





** length of a list 

*** prolog


#+begin_src swi-prolog :tangle src_out/chap1_length.pl :noweb yes

% evalation order is cirtical 
% N is N1+1 can only be evaluated once N1 is bound

length1([], 0).
length1([_|T], N):- length1(T,N1), N is N1+1.


% using accumulator to be able to have the goal in tail position

length2(L,N):- accumulate(L,0,N).
accumulate([],A,A).
accumulate([_|T],A,N):- A1 is A+1, accumulate(T,A1,N).

go :- L = [1,a,c,3],
      findall( N , length1(L,N) , Out1 ) ,
      print(Out1),
      findall( N , length2(L,N) , Out2 ) ,
      print(Out2).


#+end_src 

#+RESULTS:
: % /Users/elkawee/src/projects/reasoned/clause_and_effect/examples/src_out/chap1_pairs.pl compiled 0.00 sec, 7 clauses
: [4][4]

*** racket 
    
    The same problem as with the evaluation order abve.
    Ordinary scheme operators are obviously not defined over <proll_type/Var?>s.

    The letq form provides (qry Var?) on the right hand side which fetches a value from 
    the current substitution. 
    Should the variable be <empty> it exposes the same behaviour as ordinary prolog, 
    that is runtime crash. 
    
#+begin_src scheme :tangle src_out/chap2_length.rkt :noweb yes
  <<rack_header>>
  
  (define (length1 L N)
    (cond-e 
     [(=:= L '()) (=:= N 0)]
     [(fresh (H T N/)
             (=:= L (cons H T))
             (goalify (length1 T N/))
             (letq ([N// (+ (qry N/) 1 )])
                   (=:= N N//)))]))
  
  ;(run 1  (X) (length1  (cons 'a X) 3))
  
  
  (define (length2 L N )
    (fresh (dummy)
           (=:= dummy 0)
           (accum L N dummy)))
  
  
  (define (accum L N A)
    (cond-e 
     [(=:= L '()) (=:= N A ) ]
     [(fresh (H T) 
             (=:= L (cons H T ))
             (letq ([A~ (+ (qry A) 1 ) ])
                   (goalify (accum T N A~))))]))
  
  (run 3 (X  L ) 
       (length2  (cons '1 L ) X ))
  
  
#+end_src 

#+RESULTS:
: '((1 ()) (2 (lol:l1 . lol:l1)) (3 (lol:l1 . lol:l1)))



** inner product 

*** prolog 

#+begin_src swipl

#+end_src     


