


* book 

** party pairs 

*** prolog 

#+begin_src swi-prolog :tangle src_out/chap1_pairs.pl :noweb yes

male(bert).
male(parcival).

female(lucinda).
female(camilla).

pair(X,Y) :- male(X),female(Y).
pair(X,Y) :- female(X),male(Y).


go :- findall( (A,B) , pair(A,B) , L ) , print(L).
#+end_src

#+RESULTS:
: % /Users/elkawee/src/projects/reasoned/clause_and_effect/examples/src_out/chap1_pairs.pl compiled 0.00 sec, 8 clauses
: [ (bert,lucinda), (bert,camilla), (parcival,lucinda), (parcival,camilla), (lucinda,bert), (lucinda,parcival), (camilla,bert), (camilla,parcival)]





*** racket 
    there is no proper equivalent to global predicates but
    foo(a).
    foo(b).
    and 
    foo(X):- X==a;X==b.
    is pretty much the same so : 
    

#+begin_src scheme :tangle src_out/chap1_pairs.rkt :noweb yes :result-type raw
  #lang racket
  (require (file "../../proll1/src_out/proll1.rkt"))
  
  (define (male X)
    (cond-e
     [(=:= X 'bert)]
     [(=:= X 'parcival)]
     ))
  
  (define (female X)
    (cond-e
     [(=:= X 'lucinda)]
     [(=:= X 'camilla)]))
  
  (define (pair X Y ) 
    (cond-e
     [(male X )  (female Y)]
     [(female X) (male   Y)]))
  
  
  (run* (V1 V2 )
        (pair V1 V2)
)
#+end_src

#+RESULTS:
: '((bert lucinda) (bert camilla) (parcival lucinda) (parcival camilla) (lucinda bert) (lucinda parcival) (camilla bert) (camilla parcival))


** drinking pairs 

*** prolog 
#+begin_src swi-prolog :tangle src_out/chap1_drinking_pairs.pl :noweb yes 

drinks(john, martini).
drinks(mary, gin).
drinks(susan,wodka).
drinks(john, gin).
drinks(fred, gin).

drinks(james-b, martini).

pair(X,Y) :- drinks(X,Z),drinks(Y,Z),X\==Y.

go :- findall( (A,B) , pair(A,B) , L ) , print(L).

#+end_src

#+RESULTS:
: % /Users/elkawee/src/projects/reasoned/clause_and_effect/examples/src_out/chap1_drinking_pairs.pl compiled 0.00 sec, 9 clauses
: [ (john,james-b), (mary,john), (mary,fred), (john,mary), (john,fred), (fred,mary), (fred,john), (james-b,john)]

*** racket

#+begin_src scheme :tangle src_out/chap1_drinking_pairs.rkt :noweb yes 
  #lang racket
  (require (file "../../proll1/src_out/proll1.rkt"))
  
  (define (drinks P D)
    (cond-e 
     [(=:= P 'john)(=:= D 'martini)]
     [(=:= P 'mary)(=:= D 'gin )]
     [(=:= P 'susan)(=:= D 'wodka)]
     [(=:= P 'john) (=:= D 'gin)]
     [(=:= P 'fred) (=:= D 'gin)]
     [(=:= P 'james-b) (=:= D 'martini)]))
  
  (define (pair X Y)
    (fresh (Z)
           (and-g (drinks X Z) 
                  (drinks Y Z) 
                  (not-g (=:= X Y)))))
  
  (run* (P)
        (pair 'john P))
  
  
  
#+end_src

#+RESULTS:
: '((james-b) (mary) (fred))



** affordable journeys 

*** prolog 

#+begin_src swi-prolog :tangle src_out/chap1_affordable_journeys.pl :noweb yes 
border(sussex, kent).
border(sussex, surry).
border(surrey, kent).
border(hampshire, sussex).
border(hampshire, surrey).
border(hampshire, berkshire).
border(berkshire, surrey).
border(wiltshire, hampshire).
border(wiltshire, berkshire).


adjacent(X, Y) :- border(X, Y).
adjacent(X, Y) :- border(Y, X).

affordable(X, Y) :- adjacent(X,Z),adjacent(Z,Y),X\==Y.

go :- findall( (X,Y) , affordable(X,Y) , L ) , print(L).



#+end_src

#+RESULTS:
: % /Users/elkawee/src/projects/reasoned/clause_and_effect/examples/src_out/chap1_affordable_journeys.pl compiled 0.00 sec, 14 clauses
: [ (sussex,surrey), (surrey,sussex), (hampshire,kent), (hampshire,surry), (hampshire,kent), (hampshire,berkshire), (hampshire,surrey), (hampshire,wiltshire), (berkshire,kent), (berkshire,hampshire), (wiltshire,sussex), (wiltshire,surrey), (wiltshire,berkshire), (wiltshire,surrey), (wiltshire,hampshire), (kent,surry), (kent,hampshire), (surry,kent), (surry,hampshire), (kent,hampshire), (kent,berkshire), (sussex,surrey), (sussex,berkshire), (sussex,wiltshire), (surrey,sussex), (surrey,berkshire), (surrey,wiltshire), (berkshire,sussex), (berkshire,surrey), (berkshire,wiltshire), (surrey,hampshire), (surrey,wiltshire), (hampshire,berkshire), (berkshire,hampshire)]

*** racket 

    macro less implementation for the sport of it

    list of associations turned into a binaray function which, in turn evaluates to a goal 
    that is why ((make_pred/2 rest ) X Y) needs immediate execution in the tail of it's definition
    
    it's invocation can be thought of as prolog-macro-expansion time,
    only, that it is interspersed with it's runtime.
    
    there is no proper AST equivalent, the goals are both, AST and runtime stack structures and 
    are destroyed upon evaluation 
    ( kind of like the php interpreter with it's "generate opcodes and immediatly throw them away"
      behaviour ... i need to fix this ) 
    


#+name: make_pred_2
#+begin_src scheme
  (define (make_pred/2 assoc_list)
    (match assoc_list
           [(cons (list nam1 nam2 ) '())
            (lambda ( X Y )
              (and-g (=:= X nam1 ) (=:= Y nam2)))]
           [(cons (list nam1 nam2) rest)
            (lambda (X Y)
              (cond-e 
               [(=:= X nam1)(=:= Y nam2)]
               [((make_pred/2 rest ) X Y)]
               ))]))
#+end_src 




#+begin_src scheme :tangle src_out/chap1_affordable_journeys.rkt :noweb yes
    #lang racket 
    (require (file "../../proll1/src_out/proll1.rkt"))
    <<make_pred_2>>
    
    (define border (make_pred/2 '([ sussex kent ]
                                  [ sussex surrey]
                                  [ surrey kent ]
                                  [hampshire sussex]
                                  [hampshire surrey]
                                  [hampshire berkshire]
                                  [berkshire surrey]
                                  [wiltshire hampshire]
                                  [wiltshire berkshire]
                                  )))
    (define (adjacent X Y )
      (cond-e 
       [ (border X Y )]
       [ (border Y X) ]))
    
    
    (define (affordable X Y)
      (fresh (Z) 
             (goalify (adjacent X Z))
             (goalify (adjacent Z Y))
             (not-g (=:= X Y))
             ))
    
    
    
    (printf "===========~n~s~n============" (run* (V W) (affordable V W)))
    
#+end_src 

#+RESULTS:
: ===========
: ((sussex surrey) (sussex kent) (sussex hampshire) (sussex berkshire) (surrey sussex) (hampshire kent) (hampshire surrey) (hampshire kent) (hampshire sussex) (hampshire berkshire) (hampshire surrey) (hampshire wiltshire) (berkshire kent) (berkshire sussex) (berkshire hampshire) (wiltshire sussex) (wiltshire surrey) (wiltshire berkshire) (wiltshire surrey) (wiltshire hampshire) (kent surrey) (kent hampshire) (surrey kent) (surrey hampshire) (kent sussex) (kent hampshire) (kent berkshire) (sussex surrey) (sussex berkshire) (sussex wiltshire) (surrey sussex) (surrey berkshire) (surrey wiltshire) (berkshire sussex) (berkshire surrey) (berkshire wiltshire) (surrey hampshire) (surrey wiltshire) (hampshire berkshire) (berkshire hampshire))
: ============





** directed acyclic graph 
   
*** prolog 

#+begin_src swi-prolog :tangle src_out/chap1_dag.pl :noweb yes 
a(g,h).
a(g,d).
a(e,d).
a(h,f).
a(e,f).
a(a,e).
a(a,b).
a(b,f).
a(b,c).
a(f,c).


path(X,X).
path(X,Y) :- a(X,Z),path(Z,Y).

go :- findall( (X) , path(g,X) , L ) , print(L),
      format('~n-----------------~n'),
      findall( (X) , path(X,c) , L2 ) , print(L2).

#+end_src

#+RESULTS:
: % /Users/elkawee/tmp/klaus/examples/src_out/chap1_dag.pl compiled 0.00 sec, 14 clauses
: [g,h,f,c,d]
: -----------------
: [c,g,h,e,a,a,a,b,b,f]

*** racket 
#+begin_src scheme :tangle src_out/chap1_dag.rkt :noweb yes 
  #lang racket
  <<make_pred_2>>
  (require (file "../../proll1/src_out/proll1.rkt"))
  
  (define a (make_pred/2 '([g h]
                           [g d]
                           [e d]
                           [h f]
                           [e f]
                           [a e]
                           [a b]
                           [b f]
                           [b c]
                           [f c])))
  
  (define (path X Y )
    (cond-e 
     [(=:= X Y )]
     [(fresh (Z)
             (a X Z)
             (goalify (path Z Y)))]))
   
  
  (run* (X) (path 'g X))
  (printf "~n=============================~n" )
  (run* (X) (path X 'c))
  
#+end_src 

#+RESULTS:
: '((g) (h) (f) (c) (d))
: 
: =============================
: '((c) (g) (h) (e) (a) (a) (a) (b) (b) (f))



* babel prelude

  Since, at the time of writing, all ob-<lang>.el implementations are 
  kind of broken/inconsitend in their treatment of the various options,
  here are 2 more broken implementations. 

  But at least they work for the subset of options used in this file.

#+begin_src emacs-lisp
  (defun org-babel-execute:swi-prolog (body params)
    "experimentally exec prolog"
    ;; mostly stolen from org-babel-execute:js
    (let* ((tangle (cdr (assoc :tangle params )))
           (script-file (if (string-equal tangle "no" )
                            (org-babel-temp-file "prolog-tmp-" ) 
                          tangle )))
      
      
      (with-temp-file script-file (insert body))
      (shell-command-to-string
       (message (format "swipl -g 'go.' -t halt -s %s" 
                        (org-babel-process-file-name script-file))))
      
      )
    )
  
  (defun org-babel-execute:scheme (body params)
    (let* ((tangle (cdr (assoc :tangle params)))
           (script-file 
            (if (string-equal tangle "no")
                (org-babel-temp-file "org-babel-" ".rkt")
              tangle)))
      (with-temp-file script-file
        (insert body))
      (let* ((pn (org-babel-process-file-name script-file))
             (cmd (format "\"$(which racket)\" -u %s" pn)))
        (message cmd)
        (shell-command-to-string cmd)
        )))
  
#+end_src

#+RESULTS:
: org-babel-execute:scheme


## 
